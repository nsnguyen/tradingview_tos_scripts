# Weekly Expected Move (EM) Levels — option-chain override ready
# - Same as before, plus: manual Option Chain EM override for exact matching
# - Clear source label so you always know which EM is in use

declare upper;

# ------------------------------
# Inputs
# ------------------------------
input anchorMethod = { default WeekOpen_NWOG, PrevWeekClose, Manual };
input manualAnchor = 0.0;

# EM source
input useOptionChainEM = no;         # <— set to YES to paste the chain EM
input optionChainEM = 10.0;          # <— paste ATM straddle $ here (EM dollars)

# IV-based EM (fallback / theoretical)
input useAutoEM = yes;
input sigmaMultiplier = 1.0;         # 1.0 ≈ 1-sigma
input defaultIVInput = 0.20;         # fallback IV if ImpVolatility() is NaN

# Manual EM (if not using auto or chain)
input manualEM = 10.0;

# Behavior
input lockEMAtWeekOpen = yes;        # freeze EM at start of week
input showLabels = no;               # keep header clean
input showRightBubbles = yes;
input showDebugLabels = no;

# Colors
DefineGlobalColor("Anchor", Color.GRAY);
DefineGlobalColor("EMH", Color.GREEN);
DefineGlobalColor("EML", Color.RED);
DefineGlobalColor("Text", Color.WHITE);

# ------------------------------
# Anchor
# ------------------------------
def weekOpen = open(period = AggregationPeriod.WEEK);
def prevWeekClose = close(period = AggregationPeriod.WEEK)[1];

def selectedAnchor =
    if anchorMethod == anchorMethod.WeekOpen_NWOG then weekOpen
    else if anchorMethod == anchorMethod.PrevWeekClose then prevWeekClose
    else manualAnchor;

plot Anchor = selectedAnchor;
Anchor.SetDefaultColor(GlobalColor("Anchor"));
Anchor.SetLineWeight(2);
Anchor.SetStyle(Curve.SHORT_DASH);

# ------------------------------
# DTE (calendar-day approximation to Friday 16:00 ET)
# ------------------------------
def dow = GetDayOfWeek(GetYYYYMMDD());         # 1=Sun ... 6=Fri 7=Sat
def daysToFriday = if dow <= 6 then 6 - dow else 6;
def fracToday = if dow <= 6 then Max(0, SecondsTillTime(1600)) / 86400 else 0;
def dteCalendar = daysToFriday + fracToday;

# ------------------------------
# IV-based EM (theoretical)
# ------------------------------
def rawIV = ImpVolatility();
def iv = if !IsNaN(rawIV) and rawIV > 0 then rawIV else defaultIVInput;
def basisPrice = close;
def emAuto = basisPrice * iv * Sqrt(dteCalendar / 365) * sigmaMultiplier;

# ------------------------------
# Robust week lock
# ------------------------------
def newWeek = dow < dow[1];                      # first Monday bar
rec emAutoFrozen = if newWeek or IsNaN(emAutoFrozen[1]) then emAuto else emAutoFrozen[1];

# ------------------------------
# Final EM source selection
# ------------------------------
def emTheoretical = if lockEMAtWeekOpen then emAutoFrozen else emAuto;

def EM =
    if useOptionChainEM then optionChainEM
    else if useAutoEM then emTheoretical
    else manualEM;

# ------------------------------
# Plots
# ------------------------------
plot EMH = Anchor + EM;
EMH.SetDefaultColor(GlobalColor("EMH"));
EMH.SetLineWeight(2);

plot EML = Anchor - EM;
EML.SetDefaultColor(GlobalColor("EML"));
EML.SetLineWeight(2);


# Right-edge bubbles
def bn = BarNumber();
def isTrueLastBar = (bn == HighestAll(bn)) or IsNaN(close[-1]);
AddChartBubble(showRightBubbles and isTrueLastBar, EMH, "EMH " + AsDollars(EMH), GlobalColor("EMH"), yes);
AddChartBubble(showRightBubbles and isTrueLastBar, EML, "EML " + AsDollars(EML), GlobalColor("EML"), no);

# Labels (show source)
AddLabel(showLabels, "Anchor: " + AsDollars(Anchor), GlobalColor("Anchor"));
AddLabel(showLabels,
         "EM " + AsDollars(EM) + "  [" +
         (if useOptionChainEM then "OptionChain"
          else if useAutoEM then (if lockEMAtWeekOpen then "IV Locked" else "IV Live")
          else "Manual") + "]",
         GlobalColor("Text"));

# Debug (optional)
AddLabel(showDebugLabels, "EM_live " + AsDollars(emAuto), Color.YELLOW);
AddLabel(showDebugLabels, "EM_locked " + AsDollars(emAutoFrozen), Color.CYAN);